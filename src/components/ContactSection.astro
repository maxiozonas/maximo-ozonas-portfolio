---
import { Send, CheckCircle, Github, Linkedin, Mail } from "@lucide/astro";
import { getLangFromUrl, useTranslations } from "../i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Social links
const socialLinks = [
  {
    name: "GitHub",
    href: "https://github.com/maxiozonas",
    icon: "github"
  },
  {
    name: "LinkedIn",
    href: "https://linkedin.com/in/maximoozonas",
    icon: "linkedin"
  },
  {
    name: "Email",
    href: "maxiozonas10@gmail.com",
    icon: "mail"
  }
];

// Helper function to render social icon
const getSocialIcon = (iconName: string) => {
  switch (iconName) {
    case 'github':
      return Github;
    case 'linkedin':
      return Linkedin;
    case 'mail':
      return Mail;
    default:
      return Mail;
  }
};
---

<section id="contact" class="py-20 min-h-screen w-full">
  <div class="container mx-auto px-4 w-full">
    <div class="flex flex-col items-center mb-12">
      <h2 class="text-3xl md:text-4xl font-bold text-white mb-4">
        {t('contact.title')}
      </h2>
      <div class="bg-[#99d98c] w-[50%] h-[4px] mx-auto mt-4 mb-4"></div>
      <p class="text-gray-300 text-center max-w-2xl text-lg mb-8">
        {t('contact.description')}
      </p>
    </div>

    <div class="max-w-3xl mx-auto">
      <div class="bg-[#202020] backdrop-blur-sm p-8 rounded-lg shadow-lg border border-[#202020]/80">
        <h3 class="text-xl font-bold text-white mb-6 text-center">
          {t('contact.info')}
        </h3>
        
        <div class="grid grid-cols-1 md:grid-cols-3 gap-8 mb-10">
          {socialLinks.map((social) => (
            <a 
              href={social.href}
              target="_blank"
              rel="noopener noreferrer"
              class="flex flex-col items-center text-gray-300 hover:text-[#99d98c] transition-colors group p-4 bg-[#202020]/50 rounded-lg"
            >
              <div class="w-16 h-16 rounded-full bg-[#0a0908] flex items-center justify-center mb-4 group-hover:bg-[#202020]/80 transition-colors">
                {social.icon === 'github' && <Github size={28} />}
                {social.icon === 'linkedin' && <Linkedin size={28} />}
                {social.icon === 'mail' && <Mail size={28} />}
              </div>
              <span class="font-medium">{social.name}</span>
              <span class="text-sm text-gray-400 mt-1">{social.name === 'Email' ? 'maxiozonas10@gmail.com' : '@maximoozonas'}</span>
            </a>
          ))}
        </div>
        
        <div class="border-t border-[#202020]/80 pt-8 mt-6">
          <p class="text-gray-300 mb-4 text-center font-medium">
            {t('contact.openTo')}
          </p>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div class="bg-[#0a0908] p-4 rounded-lg flex items-center">
              <span class="w-3 h-3 bg-[#99d98c] rounded-full mr-3"></span>
              <span class="text-gray-300">{t('contact.freelance')}</span>
            </div>
            <div class="bg-[#0a0908] p-4 rounded-lg flex items-center">
              <span class="w-3 h-3 bg-[#99d98c] rounded-full mr-3"></span>
              <span class="text-gray-300">{t('contact.fulltime')}</span>
            </div>
            <div class="bg-[#0a0908] p-4 rounded-lg flex items-center">
              <span class="w-3 h-3 bg-[#99d98c] rounded-full mr-3"></span>
              <span class="text-gray-300">{t('contact.collaboration')}</span>
            </div>
          </div>
        </div>
        
        <!-- <div class="mt-10 text-center">
          <p class="text-gray-300 mb-4">
            {t('contact.emailMe')}
          </p>
          <a 
            href="maxiozonas10@gmail.com" 
            class="inline-flex items-center px-6 py-3 bg-[#99d98c] text-gray-900 font-medium rounded-lg hover:bg-[#76c893] transition-colors shadow-lg"
          >
            {t('contact.sendEmail')}
            <Mail size={18} class="ml-2" />
          </a>
        </div> -->
      </div>
    </div>
  </div>
</section>

<script>
  // Form validation and submission logic
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('contact-form') as HTMLFormElement;
    const submitButton = document.getElementById('submit-button') as HTMLButtonElement;
    const sendingIndicator = document.getElementById('sending-indicator') as HTMLDivElement;
    const successMessage = document.getElementById('success-message') as HTMLDivElement;
    
    if (!form) return;
    
    const nameInput = document.getElementById('name') as HTMLInputElement;
    const emailInput = document.getElementById('email') as HTMLInputElement;
    const messageInput = document.getElementById('message') as HTMLTextAreaElement;
    
    const nameError = document.getElementById('name-error') as HTMLParagraphElement;
    const emailError = document.getElementById('email-error') as HTMLParagraphElement;
    const messageError = document.getElementById('message-error') as HTMLParagraphElement;
    
    const validateForm = (): boolean => {
      let isValid = true;
      
      // Reset errors
      nameError.textContent = '';
      nameError.classList.add('hidden');
      emailError.textContent = '';
      emailError.classList.add('hidden');
      messageError.textContent = '';
      messageError.classList.add('hidden');
      
      // Validate name
      if (!nameInput.value.trim()) {
        nameError.textContent = 'Please enter your name';
        nameError.classList.remove('hidden');
        isValid = false;
      }
      
      // Validate email
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailInput.value.trim()) {
        emailError.textContent = 'Please enter your email';
        emailError.classList.remove('hidden');
        isValid = false;
      } else if (!emailRegex.test(emailInput.value.trim())) {
        emailError.textContent = 'Please enter a valid email';
        emailError.classList.remove('hidden');
        isValid = false;
      }
      
      // Validate message
      if (!messageInput.value.trim()) {
        messageError.textContent = 'Please enter your message';
        messageError.classList.remove('hidden');
        isValid = false;
      }
      
      return isValid;
    };
    
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      if (!validateForm()) return;
      
      // Show sending indicator
      submitButton.classList.add('hidden');
      sendingIndicator.classList.remove('hidden');
      sendingIndicator.classList.add('flex');
      
      try {
        // Send data to API endpoint
        const formData = {
          name: nameInput.value.trim(),
          email: emailInput.value.trim(),
          message: messageInput.value.trim()
        };
        
        const response = await fetch('/api/contact', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(formData)
        });
        
        // Intentar parsear la respuesta como JSON
        let result;
        try {
          const textResponse = await response.text();
          
          // Verificar si parece JSON (comienza con { o [)
          if (textResponse.trim().startsWith('{') || textResponse.trim().startsWith('[')) {
            result = JSON.parse(textResponse);
          } else {
            throw new Error(`Server returned non-JSON response: ${textResponse.substring(0, 100)}...`);
          }
        } catch (parseError) {
          console.error('Error parsing response:', parseError);
          throw new Error(`Failed to parse server response: ${parseError instanceof Error ? parseError.message : 'Unknown error'}`);
        }
        
        if (response.ok && result && result.success) {
          console.log('Email sent successfully:', result.messageId || 'No message ID');
          
          // Hide form and show success message
          form.classList.add('hidden');
          successMessage.classList.remove('hidden');
          
          // Reset form
          form.reset();
        } else {
          throw new Error(result?.message || 'Failed to send message');
        }
      } catch (error) {
        console.error('Error sending message:', error);
        
        // Reset UI
        submitButton.classList.remove('hidden');
        sendingIndicator.classList.add('hidden');
        sendingIndicator.classList.remove('flex');
        
        // Show error message with more details
        const errorMessage = error instanceof Error ? error.message : 'Unknown error';
        alert(`Failed to send message: ${errorMessage}. Please try again later or contact directly via email.`);
      }
    });
  });
</script>
